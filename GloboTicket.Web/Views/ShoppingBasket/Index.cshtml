@model GloboTicket.Web.Models.View.BasketViewModel

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration


@{
    var sandboxClientId = Configuration.GetSection("PayPalCredentials")["SandboxClientId"];
    var url = $"https://www.paypal.com/sdk/js?client-id={sandboxClientId}&currency=GBP";

    var amount = (Model.ShoppingCartTotal - Model.Discount);

    string invoiceId = string.Empty; //ViewBag.InvoiceId.ToString();
}

<h2>Your shopping cart</h2>
<h4>Here are the tickets for great events currently in your shopping cart.</h4>

<table class="table">
    <thead>
        <tr class="columnHeader">
            <th>EVENT NAME</th>
            <th>DATE</th>
            <th>PRICE PER TICKET</th>
            <th>QUANTITY</th>
            <th>TOTAL</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var line in Model.BasketLines)
        {
            <tr>
                <td>@line.EventName</td>
                <td>@line.Date.DateTime.ToShortDateString()</td>
                <td class="bold">$@line.Price</td>
                <td>
                    <form asp-action="UpdateLine">
                        <input type="hidden" name="LineId" value="@line.LineId" />
                        <select name="TicketAmount" class="w-25" asp-for="@line.Quantity">
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                        </select>
                        <button type="submit" class="filterButton">Update</button>
                    </form>
                </td>
                <td class="bold">$@(line.Price * line.Quantity) </td>
                <td>
                    <a asp-action="RemoveLine" asp-route-lineId="@line.LineId">
                        <img class="cancelIcon" src="~/img/times.svg" />
                    </a>
                </td>
            </tr>
        }

    </tbody>
    <tfoot>
        <tr>
            <td colspan="4" class="text-right bold big">Discount:</td>
            <td class="text-right bold big">
                @Model.Discount.ToString("c")
            </td>
        </tr>
        <tr>
            <td colspan="4" class="text-right bold big">Total:</td>
            <td class="text-right bold big">
                @((Model.ShoppingCartTotal - Model.Discount).ToString("c"))
            </td>
        </tr>
    </tfoot>
</table>

<div class="row">
    <div class="col-9">
        <h4>Enter your discount code here!</h4>

        <form asp-action="ApplyDiscountCode" method="post" class="form-inline" role="form">

            <label class="sr-only">Code</label>
            <input type="text" class="form-control mb-2 mr-sm-2" name="Code" placeholder="ABC-123">
            <input type="submit" class="filterButton" value="Apply" />

        </form>
    </div>
    <div class="col-3">
        <div class="text-center">
            <a class="btn btn-primary" asp-controller="ShoppingBasket" asp-action="Checkout">Check out now!</a>
        </div>
    </div>

    <div class="col-6" id="paypal-button-container" style="display: flex; justify-content: center; align-items: center;"></div>

     @* Paypal Javascript SDK Button render *@
    <script src="@url"></script>

   
    <script>
        
        paypal.Buttons({
            // Order is created on the server and the order id is returned
            createOrder() {

                return fetch("/ShoppingBasket/CreateOrder?amount=@amount", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },

                })
                .then((response) => response.json())
                //.then((order) => { console.log(order); })
                //.then((order) => {return order.id });
                .then((order) => {
                    const jsonData = JSON.parse(order);
                    const id = jsonData['id'];
                    console.log("<--orderID " + id);
                    return id;

                })

            },

            // Finalize the transaction on the server after payer approval
            //complete order and confirm payment
            onApprove : function (data, actions) {
            console.log("<--data order " + data.orderID);
                let orderID = data.orderID;

            return fetch("/ExternalPayment/CompleteOrder?orderID=" + orderID, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                //body: JSON.stringify({
                //    orderID: ordid
                //})
            })
                .then((response) => response.json())
                .then((orderData) => {
                    let paymentStatus = true;
                    //let InvoiceId = @Html.Raw(Json.Serialize(@invoiceId));
                    

                    console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));

                    const jsonData = JSON.parse(orderData);
                    let ordid = jsonData['id'];
                    //const transid = jsonData.purchase_units.payments.captures.id;
                    console.log("id ord " + ordid);
                    console.log("PaymentID " + jsonData.purchase_units[0].payments.captures[0].id)

                    let transactionId = jsonData.purchase_units[0].payments.captures[0].id;
                    let paymenttype = "Paypal";
                    //console.log("transa " + transid);

                    //const transaction = orderData.purchase_units[0].payments.captures[0];
                    //console.log("trans " + transaction.id)
                    //console.log("status " + transaction.status)
                        var url = "/ExternalPayment/PaymentStatus?status=" + paymentStatus + "&transactionId=" + transactionId + "&orderId=" + ordid + "&InvoiceId=" + ordid + "&paymentType=" + paymenttype;

                     window.location.href = url;

                    //alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);
                    // When ready to go live, remove the alert and show a success message within this page. For example:
                    // const element = document.getElementById('paypal-button-container');
                    // element.innerHTML = '<h3>Thank you for your payment!</h3>';
                    // Or go to another URL:  window.location.href = 'thank_you.html';
                });
        }


        }).render('#paypal-button-container');


    </script>

</div>


<div class="mt-2">
    <a asp-controller="EventCatalog" asp-action="Index">
        <img class="backIcon" src="~/img/arrow-down.svg" /> Back to event catalog
    </a>
</div>


